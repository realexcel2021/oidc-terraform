name: 'Deploy Terraform Script'

on:
  
  workflow_dispatch:

  push:
    branches:
      - master

  pull_request:

permissions:
  id-token: write # This is required for Github Actions to request JWT
  contents: read # This is required for actions checkout
  pull-requests: write

jobs:

  deploy-terraform:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout Git code
        uses: actions/checkout@v4
    
      - name: Configure credentials for the OIDC connections
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{secrets.AWS_ROLE}}
          role-session-name: GITHUB-ACTIONS-OIDC
          aws-region: us-east-1
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5
      
      - name: Clean Terraform Code
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Initialize Terraform
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}"

      - name: Validate Terraform Code
        id: validate
        run: terraform validate -no-color

      - name: Plan terraform code
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        

        
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })


      - name: Check if terraform plan succeeds
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
